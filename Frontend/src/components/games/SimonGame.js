import React, { useState } from 'react';
import Swal from 'sweetalert2';
import '../../styles/games.css';

const Simon = () => {
  const [sequence, setSequence] = useState([]); // The sequence generated by Simon
  const [userInput, setUserInput] = useState([]); // The input from the player
  const [isGameOver, setIsGameOver] = useState(false); // Whether the game is over
  const [level, setLevel] = useState(1); // The current level (or sequence length)
  const [isWaitingForInput, setIsWaitingForInput] = useState(false); // Flag for whether it's the player's turn to input
  const [score, setScore] = useState(0); // Player's score (based on the length of the sequence)
  const [gameStarted, setGameStarted] = useState(false); // Flag to track if the game has started

  const colors = ['red', 'green', 'blue', 'yellow']; // Color buttons for the game

  // Function to start a new game
  const startGame = () => {
    setGameStarted(true); // Mark the game as started
    setSequence([getRandomColor()]);
    setUserInput([]);
    setIsGameOver(false);
    setLevel(1);
    setScore(0);
    nextSequence();
  };

  // Function to get a random color for the sequence
  const getRandomColor = () => {
    const randomIndex = Math.floor(Math.random() * colors.length);
    return colors[randomIndex];
  };

  // Function to move to the next sequence (add one more color)
  const nextSequence = () => {
    setIsWaitingForInput(false); // Not waiting for input while playing the sequence
    setUserInput([]);
    const newSequence = [...sequence, getRandomColor()];
    setSequence(newSequence);
    setLevel(newSequence.length); // Update the level based on the sequence length
    playSequence(newSequence); // Play the sequence
  };

  // Function to play the sequence of colors (flash the buttons)
  const playSequence = (sequence) => {
    let index = 0;
    const interval = setInterval(() => {
      const color = sequence[index];
      flashColor(color);
      index++;

      if (index === sequence.length) {
        clearInterval(interval);
        setIsWaitingForInput(true);
      }
    }, 1000);
  };

  const flashColor = (color) => {
    const element = document.getElementById(color);
    element.classList.add('flash');
    setTimeout(() => {
      element.classList.remove('flash');
    }, 500);
  };

  const handleUserInput = (color) => {
    if (!isWaitingForInput || isGameOver) return;

    setUserInput((prevInput) => {
      const newInput = [...prevInput, color];
      if (newInput.length === sequence.length) {
        checkAnswer(newInput);
      }
      return newInput;
    });
  };

  const checkAnswer = (input) => {
    const isCorrect = input.every((color, index) => color === sequence[index]);
    if (isCorrect) {
      if (input.length === sequence.length) {
        setTimeout(nextSequence, 1000);
        setScore(input.length); 
      }
    } else {
      setIsGameOver(true);
      Swal.fire({
        title: 'Game Over!',
        text: `Your score was: ${score}. Would you like to play again?`,
        icon: 'error',
        confirmButtonText: 'Play Again',
        allowOutsideClick: true,
        allowEscapeKey: true,
      }).then((result) => {
        if (result.isConfirmed) {
          startGame(); // Restart the game
        }
      });
    }
  };

  // Function to render the color buttons that the player can click
  const renderButtons = () => {
    return colors.map((color) => (
      <div
        key={color}
        id={color}
        className={`color-btn ${color}`}
        onClick={() => handleUserInput(color)}
        style={{
          cursor: isWaitingForInput && !isGameOver ? 'pointer' : 'not-allowed',
          opacity: isWaitingForInput ? 1 : 0.5, // Dim colors until it's time for user input
        }}
      ></div>
    ));
  };

  return (
    <div className="game-container">
      <h2>Simon Says</h2>
      {!gameStarted ? (
        <div>
          <p>Welcome to Simon Says! Click "Start Game" to begin.</p>
          <button onClick={startGame}>Start Game</button>
        </div>
      ) : (
        <div>
          <p>Level: {level}</p>
          <p>Score: {score}</p>
          <div className="buttons-container">{renderButtons()}</div>
        </div>
      )}
    </div>
  );
};

export default Simon;
